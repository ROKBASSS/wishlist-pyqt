# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QTableWidgetItem
import mysql.connector
import design
data = []
class WishList(QMainWindow, design.Ui_MainWindow):
    def onload(self, config):
        db = mysql.connector.Connect(**config)

        cursor = db.cursor()
        
        cursor.execute('SET sql_mode = ""')

        # stmt_drop = "DROP TABLE IF EXISTS {0}".format(tbl)
        # cursor.execute(stmt_drop)
        get_all = "SELECT * FROM wishlist.wishes;"
        cursor.execute(get_all)
        for row in cursor.fetchall():
            data.append(row)
        self.tableWidget.setRowCount(len(data) + 10)
        for row_pos in range(len(data)):
            self.tableWidget.setItem(row_pos, 0, QTableWidgetItem(data[row_pos][1]))
            self.tableWidget.setItem(row_pos, 1, QTableWidgetItem(data[row_pos][2]))
            self.tableWidget.setItem(row_pos, 2, QTableWidgetItem(data[row_pos][3]))
            self.tableWidget.setItem(row_pos, 3, QTableWidgetItem(data[row_pos][4]))
        self.tableWidget.cellChanged.connect(self.update_table)
        cursor.close()
        db.close()


    def save_wishes(self):
        # 0 - idwishes, 1 - name, 2 - price, 3 - link, 4 - note
        db = mysql.connector.Connect(**config)

        cursor = db.cursor()
        
        for i in data:
            row = f"REPLACE wishlist.wishes SET idwishes = '{i[0]}', name = '{i[1]}', price = '{i[2]}', link = '{i[3]}', note='{i[4]}';"
            cursor.execute(row)
        db.commit()
        cursor.close()
        db.close()
        
    def update_table(self):
        
        try:
            
            item = (self.tableWidget.currentRow(),
            self.tableWidget.item(self.tableWidget.currentRow(),0).text(),
            self.tableWidget.item(self.tableWidget.currentRow(),1).text(),
            self.tableWidget.item(self.tableWidget.currentRow(),2).text(),
            self.tableWidget.item(self.tableWidget.currentRow(),3).text())
            # print(item)
            if len(data) < self.tableWidget.currentRow() + 1:
                data.append(item)
            else:
                data[self.tableWidget.currentRow()] = item
            self.tableWidget.setRowCount(len(data) + 9)
        except TypeError:
            self.tableWidget.setRowCount(len(data) + 10)
            pass
        except AttributeError:
            self.tableWidget.setRowCount(len(data) + 10)
            pass
        

    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.save_wishes)
        
    


       

if __name__ == "__main__":
    import sys
    config = {
        'host': 'localhost',
        'port': 3306,
        'database': 'wishlist',
        'user': 'bf9c3a5affbbcb',
        'password': '23f46049',
        'charset': 'utf8',
        'use_unicode': True,
        'get_warnings': True,
    }
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = WishList()
    MainWindow.show()
    MainWindow.onload(config)
    sys.exit(app.exec_())

# CREATE SCHEMA `wishlist` ;

# CREATE TABLE `wishlist`.`wishes` (
#   `idwishes` INT NOT NULL,
#   `name` VARCHAR(45) NULL,
#   `price` VARCHAR(45) NULL,
#   `link` VARCHAR(45) NULL,
#   `note` VARCHAR(45) NULL,
#   PRIMARY KEY (`idwishes`));

# SELECT * FROM wishlist.wishes;